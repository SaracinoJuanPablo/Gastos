<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestor de Gastos</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <style>
        /* Los estilos se mantienen igual */
        :root {
            --background-color: #ffffff;
            --card-background: #ffffff;
            --primary-text-color: #1d1d1f;
            --secondary-text-color: #86868b;
            --accent-color: #0071e3;
            --accent-color-hover: #0077ed;
            --destructive-color: #ff3b30;
            --positive-color: #30d158;
            --border-color: rgba(0, 0, 0, 0.04);
            --input-background: #f5f5f7;
            --border-radius-large: 20px;
            --border-radius-medium: 10px;
            --transition-speed: 0.3s;
            --shadow-sm: 0 1px 3px rgba(0, 0, 0, 0.04);
            --shadow-md: 0 2px 8px rgba(0, 0, 0, 0.06);
        }
        
        body.dark-mode {
            --background-color: #000000;
            --card-background: #1c1c1e;
            --primary-text-color: #f5f5f7;
            --secondary-text-color: #98989d;
            --border-color: rgba(255, 255, 255, 0.08);
            --input-background: #2c2c2e;
            --shadow-sm: 0 1px 3px rgba(0, 0, 0, 0.3);
            --shadow-md: 0 2px 8px rgba(0, 0, 0, 0.4);
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, "SF Pro Display", "Segoe UI", sans-serif;
            background-color: var(--background-color);
            color: var(--primary-text-color);
            line-height: 1.6;
            -webkit-font-smoothing: antialiased;
            transition: background-color var(--transition-speed) ease, color var(--transition-speed) ease;
        }
        
        .container {
            max-width: 1240px;
            margin: 0 auto;
            padding: 4rem 2rem;
        }
        
        .header-container {
            display: flex;
            justify-content: center;
            align-items: center;
            position: relative;
            margin-bottom: 4rem;
        }
        
        h1 {
            font-size: 3.2em;
            font-weight: 700;
            letter-spacing: -1.2px;
            margin: 0;
        }
        
        .main-grid {
            display: grid;
            grid-template-columns: 1fr 1.8fr;
            gap: 1.5rem;
            margin-bottom: 1.5rem;
        }
        
        .theme-switcher {
            position: absolute;
            right: 0;
            top: 50%;
            transform: translateY(-50%);
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .theme-switcher .icon {
            width: 20px;
            height: 20px;
            color: var(--secondary-text-color);
            transition: opacity 0.2s;
            opacity: 0.7;
        }
        
        .theme-switcher .icon:hover {
            opacity: 1;
        }
        
        .switch {
            position: relative;
            display: inline-block;
            width: 48px;
            height: 28px;
        }
        
        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }
        
        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(120, 120, 128, 0.16);
            transition: .3s;
            border-radius: 34px;
        }
        
        .slider:before {
            position: absolute;
            content: "";
            height: 24px;
            width: 24px;
            left: 2px;
            bottom: 2px;
            background-color: white;
            transition: .3s;
            border-radius: 50%;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.15);
        }
        
        input:checked + .slider {
            background-color: var(--accent-color);
        }
        
        input:checked + .slider:before {
            transform: translateX(20px);
        }
        
        .income-section, .expenses-section, .chart-container, .summary-card {
            background: var(--card-background);
            border-radius: var(--border-radius-large);
            padding: 2rem;
            box-shadow: var(--shadow-md);
            border: 1px solid var(--border-color);
            transition: all var(--transition-speed) ease;
        }
        
        .income-section:hover, .expenses-section:hover, .chart-container:hover, .summary-card:hover {
            box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);
        }
        
        body.dark-mode .income-section:hover, body.dark-mode .expenses-section:hover, body.dark-mode .chart-container:hover, body.dark-mode .summary-card:hover {
            box-shadow: 0 4px 16px rgba(0, 0, 0, 0.5);
        }
        
        input[type="number"], input[type="text"] {
            background-color: var(--input-background);
            color: var(--primary-text-color);
            border: 1px solid transparent;
            border-radius: var(--border-radius-medium);
            transition: all 0.2s ease;
            width: 100%;
            padding: 0.75rem 1rem;
            font-size: 0.95rem;
        }
        
        input:focus {
            border-color: var(--accent-color);
            outline: none;
            box-shadow: 0 0 0 4px rgba(0, 113, 227, 0.1);
        }
        
        .expense-category {
            padding-bottom: 1.5rem;
            margin-bottom: 1.5rem;
            border-bottom: 1px solid var(--border-color);
            transition: border-color var(--transition-speed) ease;
        }
        
        .expense-category:last-child {
            border-bottom: none;
        }
        
        .category-header {
            display: flex;
            align-items: center;
            gap: 12px;
            flex-wrap: wrap;
        }
        
        .category-header-main {
            display: flex;
            align-items: center;
            gap: 12px;
            flex-grow: 1;
        }
        
        .category-name-input {
            background: transparent;
            color: var(--primary-text-color);
            border: none;
            font-size: 1.05em;
            font-weight: 600;
            padding: 0.5rem 0;
            border-bottom: 2px solid transparent;
            transition: border-color 0.2s ease, color var(--transition-speed) ease;
            flex-grow: 1;
        }
        
        .category-name-input:focus {
            outline: none;
            box-shadow: none;
            border-color: var(--accent-color);
        }
        
        .category-total {
            font-size: 1.05em;
            font-weight: 600;
            color: var(--primary-text-color);
            margin-left: auto;
            white-space: nowrap;
        }
        
        .category-controls {
            display: flex;
            gap: 6px;
            align-items: center;
        }
        
        .action-btn {
            background: transparent;
            border: 1px solid var(--border-color);
            color: var(--accent-color);
            cursor: pointer;
            font-size: 0.85em;
            font-weight: 600;
            padding: 6px 14px;
            border-radius: 20px;
            transition: all 0.2s ease;
        }
        
        .action-btn:hover {
            background-color: var(--input-background);
            border-color: var(--accent-color);
        }
        
        .delete-btn {
            background: transparent;
            color: var(--secondary-text-color);
            border: 1px solid var(--border-color);
            border-radius: 50%;
            width: 28px;
            height: 28px;
            font-size: 1.4em;
            font-weight: 300;
            transition: all 0.2s ease;
            flex-shrink: 0;
            cursor: pointer;
        }
        
        .delete-btn:hover {
            background: var(--destructive-color);
            color: #fff;
            border-color: var(--destructive-color);
        }
        
        .simple-inputs-container, .subcategories-container {
            padding: 1rem 0 0 0;
        }
        
        .subcategory-item {
            display: flex;
            align-items: center;
            gap: 12px;
            margin-bottom: 0.75rem;
            padding-left: 20px;
            border-left: 2px solid var(--border-color);
        }
        
        .input-label {
            font-size: 0.85em;
            color: var(--secondary-text-color);
            white-space: nowrap;
            font-weight: 500;
        }
        
        h2.section-title, .chart-container h3 {
            font-size: 1.3em;
            font-weight: 600;
            text-align: left;
            margin-bottom: 1.5rem;
            letter-spacing: -0.3px;
        }
        
        .month-selector {
            text-align: center;
            margin-bottom: 3rem;
        }
        
        .month-selector select {
            background-color: var(--card-background);
            border: 1px solid var(--border-color);
            color: var(--primary-text-color);
            border-radius: 12px;
            font-size: 0.95em;
            padding: 0.75rem 3rem 0.75rem 1.5rem;
            cursor: pointer;
            appearance: none;
            background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='%2386868b' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6 9 12 15 18 9'%3e%3c/polyline%3e%3c/svg%3e");
            background-repeat: no-repeat;
            background-position: right 1rem center;
            background-size: 1em;
            transition: all var(--transition-speed) ease;
            font-weight: 500;
            box-shadow: var(--shadow-sm);
        }
        
        .month-selector select:hover {
            border-color: var(--accent-color);
        }
        
        .income-input {
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .income-input span {
            font-size: 1.8em;
            font-weight: 600;
            color: var(--secondary-text-color);
        }
        
        .income-input input {
            font-size: 1.8em;
            font-weight: 600;
        }
        
        button, .add-expense-btn {
            background: var(--accent-color);
            color: #fff;
            border: none;
            border-radius: 12px;
            padding: 0.85rem 1.5rem;
            font-size: 0.95rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        button:hover, .add-expense-btn:hover {
            background: var(--accent-color-hover);
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(0, 113, 227, 0.25);
        }
        
        button:active, .add-expense-btn:active {
            transform: translateY(0);
        }
        
        .add-expense-btn {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            width: 100%;
            margin-bottom: 1.5rem;
        }
        
        .fixed-category-checkbox {
            display: flex;
            align-items: center;
            gap: 6px;
            font-size: 0.85em;
            color: var(--secondary-text-color);
            font-weight: 500;
        }
        
        .fixed-category-checkbox input[type="checkbox"] {
            width: 18px;
            height: 18px;
            accent-color: var(--accent-color);
            cursor: pointer;
        }
        
        .export-section {
            text-align: center;
            margin: 3rem 0;
            display: flex;
            gap: 12px;
            justify-content: center;
        }
        
        .export-btn {
            margin: 0;
            background: var(--card-background);
            color: var(--accent-color);
            font-weight: 600;
            border: 1px solid var(--border-color);
            box-shadow: var(--shadow-sm);
        }
        
        .export-btn:hover {
            background-color: var(--accent-color);
            color: white;
            border-color: var(--accent-color);
        }
        
        .summary-section {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
            gap: 1.5rem;
            margin-bottom: 1.5rem;
        }
        
        .summary-card {
            padding: 1.75rem;
            text-align: left;
        }
        
        .summary-card h3 {
            font-size: 0.9em;
            font-weight: 600;
            color: var(--secondary-text-color);
            margin-bottom: 0.75rem;
            letter-spacing: 0.3px;
            text-transform: uppercase;
        }
        
        .summary-card .amount {
            font-size: 2.2em;
            font-weight: 700;
            margin-bottom: 5px;
            letter-spacing: -0.8px;
        }
        
        .income-amount {
            color: var(--positive-color);
        }
        
        .expense-amount {
            color: var(--destructive-color);
        }
        
        .savings-amount {
            color: var(--accent-color);
        }
        
        .total-savings-amount {
            color: #5e5ce6;
        }
        
        .charts-section {
            margin-top: 1.5rem;
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1.5rem;
        }
        
        canvas {
            max-height: 340px;
        }
        
        @media (max-width: 900px) {
            .main-grid, .charts-section {
                grid-template-columns: 1fr;
            }
            
            .header-container {
                flex-direction: column;
                gap: 1.5rem;
            }
            
            .theme-switcher {
                position: static;
                transform: none;
            }
            
            h1 {
                font-size: 2.5em;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header-container">
            <h1>💰 Gestor de Gastos</h1>
            <div class="theme-switcher">
                <svg class="icon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M12 3v2.25m6.364.386l-1.591 1.591M21 12h-2.25m-.386 6.364l-1.591-1.591M12 18.75V21m-4.773-4.227l-1.591 1.591M5.25 12H3m4.227-4.773L5.636 5.636M15.75 12a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0z" />
                </svg>
                <label class="switch">
                    <input type="checkbox" id="themeToggle">
                    <span class="slider"></span>
                </label>
                <svg class="icon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M21.752 15.002A9.718 9.718 0 0118 15.75c-5.385 0-9.75-4.365-9.75-9.75 0-1.33.266-2.597.748-3.752A9.753 9.753 0 003 11.25C3 16.635 7.365 21 12.75 21a9.753 9.753 0 009.002-5.998z" />
                </svg>
            </div>
        </div>
        
        <div class="month-selector">
            <select id="monthSelect"></select>
        </div>
        
        <div class="main-grid">
            <div class="income-section">
                <h2 class="section-title">💼 Ingresos</h2>
                <div class="income-input">
                    <span>$</span>
                    <input type="number" id="incomeInput" placeholder="0.00">
                </div>
            </div>
            
            <div class="expenses-section">
                <h2 class="section-title">📊 Egresos</h2>
                <button class="add-expense-btn" id="addExpenseBtn">+ Agregar Categoría</button>
                <div id="expensesList"></div>
            </div>
        </div>
        
        <div class="summary-section">
            <div class="summary-card">
                <h3>💰 Ingresos Totales</h3>
                <div class="amount income-amount" id="totalIncome">$0.00</div>
            </div>
            <div class="summary-card">
                <h3>💸 Gastos Totales</h3>
                <div class="amount expense-amount" id="totalExpenses">$0.00</div>
            </div>
            <div class="summary-card">
                <h3>💎 Ahorro del Mes</h3>
                <div class="amount savings-amount" id="monthlySavings">$0.00</div>
            </div>
            <div class="summary-card">
                <h3>🎯 Gasto Estimado</h3>
                <div class="amount expense-amount" id="totalEstimated">$0.00</div>
            </div>
            <div class="summary-card">
                <h3>📈 Ahorro Estimado</h3>
                <div class="amount savings-amount" id="estimatedSavings">$0.00</div>
            </div>
            <div class="summary-card">
                <h3>🏆 Ahorros Totales</h3>
                <div class="amount total-savings-amount" id="totalSavings">$0.00</div>
            </div>
        </div>
        
        <div class="export-section">
            <button class="export-btn" id="exportPdfBtn">📄 Exportar PDF</button>
            <button class="export-btn" id="exportExcelBtn">📊 Exportar Excel</button>
        </div>
        
        <div class="charts-section">
            <div class="chart-container">
                <h3>Gastos por Categoría</h3>
                <canvas id="expensesChart"></canvas>
            </div>
            <div class="chart-container">
                <h3>Ahorros por Mes</h3>
                <canvas id="savingsChart"></canvas>
            </div>
        </div>
    </div>

    <script>
        let monthlyData = {};
        let currentMonth = new Date().getMonth();
        let idCounter = 0;
        let expensesChart = null;
        let savingsChart = null;

        // Inicializar datos para todos los meses
        function initializeData() {
            for (let i = 0; i < 12; i++) {
                if (!monthlyData[i]) {
                    monthlyData[i] = {
                        income: 0,
                        expenses: []
                    };
                }
            }
        }

        // Crear estructura de gasto
        function createExpense() {
            return {
                id: idCounter++,
                categoryName: '',
                isFixed: false,
                isParent: false,
                amount: 0,
                estimated: 0,
                subcategories: []
            };
        }

        // Crear estructura de subcategoría
        function createSubcategory() {
            return {
                id: idCounter++,
                name: '',
                amount: 0,
                estimated: 0
            };
        }

        // Agregar nuevo gasto
        function addExpense() {
            if (!monthlyData[currentMonth]) {
                monthlyData[currentMonth] = {
                    income: 0,
                    expenses: []
                };
            }
            monthlyData[currentMonth].expenses.push(createExpense());
            render();
        }

        // Convertir categoría simple a categoría padre
        function convertToParent(parentId) {
            const expense = findExpense(parentId);
            if (expense && !expense.isParent) {
                expense.isParent = true;
                expense.amount = 0;
                expense.estimated = 0;
                expense.subcategories.push(createSubcategory());
                render();
            }
        }

        // Agregar subcategoría
        function addSubcategory(parentId) {
            const parent = findExpense(parentId);
            if (parent && parent.isParent) {
                parent.subcategories.push(createSubcategory());
                render();
            }
        }

        // Actualizar valor
        function updateValue(parentId, subId, field, value) {
            const parent = findExpense(parentId);
            if (!parent) return;

            // Guardar estado original para propagación
            const originalParentState = JSON.parse(JSON.stringify(parent));
            
            let target = parent;
            if (subId !== null) {
                target = parent.subcategories.find(s => s.id === subId);
            }
            
            if (!target) return;

            const isNumeric = ['amount', 'estimated'].includes(field);
            target[field] = isNumeric ? (parseFloat(value) || 0) : value;
            
            // Si se marca como fijo, propagar a meses siguientes
            if (field === 'isFixed') {
                if (target.isFixed) {
                    propagateAddition(target);
                } else {
                    propagateRemoval(target);
                }
            } else if (parent.isFixed) {
                // Si es una categoría fija, propagar cambios a meses siguientes
                propagateUpdate(originalParentState, parent);
            }
            
            render();
        }

        // Eliminar elemento
        function removeElement(parentId, subId) {
            if (subId !== null) {
                // Eliminar subcategoría
                const parent = findExpense(parentId);
                if (parent) {
                    parent.subcategories = parent.subcategories.filter(s => s.id !== subId);
                }
            } else {
                // Eliminar categoría completa
                const expenseToRemove = findExpense(parentId);
                if (expenseToRemove && expenseToRemove.isFixed) {
                    propagateRemoval(expenseToRemove);
                }
                monthlyData[currentMonth].expenses = monthlyData[currentMonth].expenses.filter(e => e.id !== parentId);
            }
            render();
        }

        // Buscar gasto por ID
        function findExpense(id) {
            if (!monthlyData[currentMonth] || !monthlyData[currentMonth].expenses) return null;
            return monthlyData[currentMonth].expenses.find(e => e.id === id);
        }

        // Propagar adición a meses siguientes
        function propagateAddition(sourceExpense) {
            for (let month = currentMonth + 1; month < 12; month++) {
                if (!monthlyData[month]) {
                    monthlyData[month] = {
                        income: 0,
                        expenses: []
                    };
                }
                
                const exists = monthlyData[month].expenses.some(e => 
                    e.categoryName === sourceExpense.categoryName && e.isFixed
                );
                
                if (!exists) {
                    let newExpense = JSON.parse(JSON.stringify(sourceExpense));
                    newExpense.id = idCounter++;
                    newExpense.amount = 0;
                    newExpense.subcategories.forEach(sub => {
                        sub.id = idCounter++;
                        sub.amount = 0;
                    });
                    monthlyData[month].expenses.push(newExpense);
                }
            }
        }

        // Propagar eliminación a meses siguientes
        function propagateRemoval(sourceExpense) {
            for (let month = currentMonth + 1; month < 12; month++) {
                if (monthlyData[month] && monthlyData[month].expenses) {
                    monthlyData[month].expenses = monthlyData[month].expenses.filter(e => 
                        !(e.categoryName === sourceExpense.categoryName && e.isFixed)
                    );
                }
            }
        }

        // Propagar actualización a meses siguientes
        function propagateUpdate(originalState, currentState) {
            for (let month = currentMonth + 1; month < 12; month++) {
                if (monthlyData[month] && monthlyData[month].expenses) {
                    const targetExpense = monthlyData[month].expenses.find(e => 
                        e.categoryName === originalState.categoryName && e.isFixed
                    );
                    
                    if (targetExpense) {
                        targetExpense.categoryName = currentState.categoryName;
                        targetExpense.estimated = currentState.estimated;
                        
                        if (targetExpense.isParent && currentState.isParent) {
                            currentState.subcategories.forEach(sourceSub => {
                                let targetSub = targetExpense.subcategories.find(ts => ts.name === sourceSub.name);
                                if (targetSub) {
                                    targetSub.estimated = sourceSub.estimated;
                                }
                            });
                        }
                    }
                }
            }
        }

        // Renderizar lista de gastos
        function renderExpenses() {
            const list = document.getElementById('expensesList');
            list.innerHTML = '';
            
            if (!monthlyData[currentMonth] || !monthlyData[currentMonth].expenses) {
                return;
            }
            
            monthlyData[currentMonth].expenses.forEach(exp => {
                const totalAmount = exp.isParent ? 
                    exp.subcategories.reduce((sum, s) => sum + s.amount, 0) : 
                    exp.amount;
                
                const categoryElement = document.createElement('div');
                categoryElement.className = 'expense-category';
                categoryElement.innerHTML = `
                    <div class="category-header">
                        <div class="category-header-main">
                            <input type="text" class="category-name-input" placeholder="Nombre de Categoría" value="${exp.categoryName}">
                            <div class="fixed-category-checkbox">
                                <input type="checkbox" ${exp.isFixed ? 'checked' : ''}>
                                <span>Fija</span>
                            </div>
                        </div>
                        <strong class="category-total">$${totalAmount.toFixed(2)}</strong>
                        <div class="category-controls">
                            <button class="action-btn add-subcategory-btn">${exp.isParent ? '+ Subcategoría' : 'Detallar'}</button>
                            <button class="delete-btn">&times;</button>
                        </div>
                    </div>
                `;
                
                if (exp.isParent) {
                    const subcontainer = document.createElement('div');
                    subcontainer.className = 'subcategories-container';
                    
                    exp.subcategories.forEach(sub => {
                        const subElement = document.createElement('div');
                        subElement.className = 'subcategory-item';
                        subElement.innerHTML = `
                            <input type="text" placeholder="Subcategoría" value="${sub.name}" data-field="name" style="flex-grow: 1;">
                            <span class="input-label">Gasto: $</span>
                            <input type="number" placeholder="0.00" value="${sub.amount || ''}" data-field="amount" style="width: 100px;">
                            <span class="input-label">Estimado: $</span>
                            <input type="number" placeholder="0.00" value="${sub.estimated || ''}" data-field="estimated" style="width: 100px;">
                            <button class="delete-btn" style="width:24px; height:24px; font-size: 1.2em;">&times;</button>
                        `;
                        
                        subElement.querySelectorAll('input').forEach(input => {
                            input.onchange = (e) => updateValue(exp.id, sub.id, e.target.dataset.field, e.target.value);
                        });
                        
                        subElement.querySelector('.delete-btn').onclick = () => removeElement(exp.id, sub.id);
                        subcontainer.appendChild(subElement);
                    });
                    
                    categoryElement.appendChild(subcontainer);
                } else {
                    const simpleInputsContainer = document.createElement('div');
                    simpleInputsContainer.className = 'simple-inputs-container';
                    simpleInputsContainer.innerHTML = `
                        <div class="subcategory-item">
                            <span class="input-label">Gasto Real: $</span>
                            <input type="number" placeholder="0.00" value="${exp.amount || ''}" data-field="amount">
                            <span class="input-label">Gasto Estimado: $</span>
                            <input type="number" placeholder="0.00" value="${exp.estimated || ''}" data-field="estimated">
                        </div>
                    `;
                    
                    simpleInputsContainer.querySelectorAll('input').forEach(input => {
                        input.onchange = (e) => updateValue(exp.id, null, e.target.dataset.field, e.target.value);
                    });
                    
                    categoryElement.appendChild(simpleInputsContainer);
                }
                
                categoryElement.querySelector('.category-name-input').onchange = (e) => 
                    updateValue(exp.id, null, 'categoryName', e.target.value);
                
                categoryElement.querySelector('input[type="checkbox"]').onchange = (e) => 
                    updateValue(exp.id, null, 'isFixed', e.target.checked);
                
                categoryElement.querySelector('.delete-btn').onclick = () => removeElement(exp.id, null);
                
                const addSubBtn = categoryElement.querySelector('.add-subcategory-btn');
                addSubBtn.onclick = exp.isParent ? 
                    () => addSubcategory(exp.id) : 
                    () => convertToParent(exp.id);
                
                list.appendChild(categoryElement);
            });
        }

        // Renderizar interfaz completa
        function render() {
            renderExpenses();
            updateSummary();
            updateCharts();
        }

        // Calcular totales
        function calculateTotals() {
            if (!monthlyData[currentMonth] || !monthlyData[currentMonth].expenses) {
                return { totalExpenses: 0, totalEstimated: 0 };
            }
            
            const expenses = monthlyData[currentMonth].expenses;
            let totalExpenses = 0;
            let totalEstimated = 0;
            
            expenses.forEach(exp => {
                if (exp.isParent) {
                    totalExpenses += exp.subcategories.reduce((s, sub) => s + sub.amount, 0);
                    totalEstimated += exp.subcategories.reduce((s, sub) => s + sub.estimated, 0);
                } else {
                    totalExpenses += exp.amount;
                    totalEstimated += exp.estimated;
                }
            });
            
            return { totalExpenses, totalEstimated };
        }

        // Actualizar resumen
        function updateSummary() {
            const income = monthlyData[currentMonth] ? monthlyData[currentMonth].income : 0;
            const { totalExpenses, totalEstimated } = calculateTotals();
            const monthlySavings = income - totalExpenses;
            const estimatedSavings = income - totalEstimated;
            
            let totalSavings = 0;
            for (let i = 0; i < 12; i++) {
                if (monthlyData[i]) {
                    const monthIncome = monthlyData[i].income || 0;
                    let monthExpenses = 0;
                    
                    if (monthlyData[i].expenses) {
                        monthlyData[i].expenses.forEach(exp => {
                            monthExpenses += exp.isParent ? 
                                exp.subcategories.reduce((s, sub) => s + sub.amount, 0) : 
                                exp.amount;
                        });
                    }
                    
                    totalSavings += (monthIncome - monthExpenses);
                }
            }
            
            document.getElementById('totalIncome').textContent = '$' + income.toFixed(2);
            document.getElementById('totalExpenses').textContent = '$' + totalExpenses.toFixed(2);
            document.getElementById('monthlySavings').textContent = '$' + monthlySavings.toFixed(2);
            document.getElementById('totalEstimated').textContent = '$' + totalEstimated.toFixed(2);
            document.getElementById('estimatedSavings').textContent = '$' + estimatedSavings.toFixed(2);
            document.getElementById('totalSavings').textContent = '$' + totalSavings.toFixed(2);
            
            document.getElementById('monthlySavings').style.color = monthlySavings >= 0 ? 'var(--positive-color)' : 'var(--destructive-color)';
            document.getElementById('estimatedSavings').style.color = estimatedSavings >= 0 ? 'var(--positive-color)' : 'var(--destructive-color)';
        }

        // Actualizar gráficos
        function updateCharts() {
            if (typeof Chart === 'undefined') return;
            
            const isDarkMode = document.body.classList.contains('dark-mode');
            const gridColor = isDarkMode ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)';
            const textColor = isDarkMode ? '#f5f5f7' : '#86868b';
            
            // Gráfico de gastos por categoría
            const expCtx = document.getElementById('expensesChart').getContext('2d');
            if (expensesChart) expensesChart.destroy();
            
            const expenseLabels = [];
            const expenseData = [];
            
            if (monthlyData[currentMonth] && monthlyData[currentMonth].expenses) {
                monthlyData[currentMonth].expenses.forEach(exp => {
                    const total = exp.isParent ? 
                        exp.subcategories.reduce((s, sub) => s + sub.amount, 0) : 
                        exp.amount;
                    
                    if (total > 0) {
                        expenseLabels.push(exp.categoryName || 'Sin nombre');
                        expenseData.push(total);
                    }
                });
            }
            
            if (expenseData.length > 0) {
                expensesChart = new Chart(expCtx, {
                    type: 'doughnut',
                    data: {
                        labels: expenseLabels,
                        datasets: [{
                            data: expenseData,
                            backgroundColor: generateColors(expenseData.length),
                            borderWidth: 2,
                            borderColor: isDarkMode ? '#1c1c1e' : '#fff'
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                labels: {
                                    color: textColor,
                                    font: {
                                        size: 12,
                                        family: '-apple-system, BlinkMacSystemFont, "SF Pro Display", "Segoe UI", sans-serif'
                                    }
                                }
                            }
                        }
                    }
                });
            } else {
                expCtx.clearRect(0, 0, expCtx.canvas.width, expCtx.canvas.height);
                expCtx.font = '16px -apple-system';
                expCtx.fillStyle = textColor;
                expCtx.textAlign = 'center';
                expCtx.fillText('Sin gastos para mostrar', expCtx.canvas.width / 2, expCtx.canvas.height / 2);
            }
            
            // Gráfico de ahorros por mes
            const savCtx = document.getElementById('savingsChart').getContext('2d');
            if (savingsChart) savingsChart.destroy();
            
            const monthNames = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'];
            const savingsData = monthNames.map((_, i) => {
                if (!monthlyData[i]) return 0;
                
                let totalMonthExpenses = 0;
                if (monthlyData[i].expenses) {
                    monthlyData[i].expenses.forEach(exp => {
                        totalMonthExpenses += exp.isParent ? 
                            exp.subcategories.reduce((s, sub) => s + sub.amount, 0) : 
                            exp.amount;
                    });
                }
                
                return (monthlyData[i].income || 0) - totalMonthExpenses;
            });
            
            savingsChart = new Chart(savCtx, {
                type: 'line',
                data: {
                    labels: monthNames,
                    datasets: [{
                        label: 'Ahorros',
                        data: savingsData,
                        borderColor: '#0071e3',
                        backgroundColor: 'rgba(0, 113, 227, 0.1)',
                        fill: true,
                        tension: 0.4,
                        pointRadius: 4,
                        pointHoverRadius: 6
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        y: {
                            grid: {
                                color: gridColor
                            },
                            ticks: {
                                color: textColor,
                                font: {
                                    size: 11,
                                    family: '-apple-system, BlinkMacSystemFont, "SF Pro Display", "Segoe UI", sans-serif'
                                }
                            }
                        },
                        x: {
                            grid: {
                                color: gridColor
                            },
                            ticks: {
                                color: textColor,
                                font: {
                                    size: 11,
                                    family: '-apple-system, BlinkMacSystemFont, "SF Pro Display", "Segoe UI", sans-serif'
                                }
                            }
                        }
                    }
                }
            });
        }

        // Generar colores para gráficos
        function generateColors(count) {
            const colors = ['#0071e3', '#30d158', '#ff9500', '#ff3b30', '#5e5ce6', '#ff2d55', '#af52de', '#5ac8fa', '#ffcc00'];
            let result = [];
            for (let i = 0; i < count; i++) {
                result.push(colors[i % colors.length]);
            }
            return result;
        }

        // Exportar a PDF
        function exportToPDF() {
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();
            
            doc.setFontSize(18);
            doc.text('Reporte Financiero', 20, 20);
            doc.setFontSize(12);
            
            const monthNames = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];
            doc.text(`Mes: ${monthNames[currentMonth]}`, 20, 30);
            
            let y = 40;
            const income = monthlyData[currentMonth] ? monthlyData[currentMonth].income : 0;
            doc.text(`Ingresos: $${income.toFixed(2)}`, 20, y);
            y += 10;
            
            doc.text('Gastos:', 20, y);
            y += 7;
            
            if (monthlyData[currentMonth] && monthlyData[currentMonth].expenses) {
                monthlyData[currentMonth].expenses.forEach(exp => {
                    const total = exp.isParent ? 
                        exp.subcategories.reduce((s, sub) => s + sub.amount, 0) : 
                        exp.amount;
                    
                    if (total > 0) {
                        doc.text(`${exp.categoryName || 'Sin nombre'}: $${total.toFixed(2)}`, 25, y);
                        y += 7;
                        
                        if (exp.isParent) {
                            exp.subcategories.forEach(sub => {
                                if (sub.amount > 0) {
                                    doc.text(` - ${sub.name || 'Sin nombre'}: $${sub.amount.toFixed(2)}`, 30, y);
                                    y += 7;
                                }
                            });
                        }
                        
                        if (y > 270) {
                            doc.addPage();
                            y = 20;
                        }
                    }
                });
            }
            
            const { totalExpenses } = calculateTotals();
            const savings = income - totalExpenses;
            
            y += 5;
            doc.text(`Total Gastos: $${totalExpenses.toFixed(2)}`, 20, y);
            y += 7;
            doc.text(`Ahorros: $${savings.toFixed(2)}`, 20, y);
            
            doc.save(`reporte_${monthNames[currentMonth].toLowerCase()}.pdf`);
        }

        // Exportar a Excel
        function exportToExcel() {
            const data = [['Categoría', 'Subcategoría', 'Gasto', 'Estimado']];
            
            if (monthlyData[currentMonth] && monthlyData[currentMonth].expenses) {
                monthlyData[currentMonth].expenses.forEach(exp => {
                    if (exp.isParent) {
                        const totalAmount = exp.subcategories.reduce((s, sub) => s + sub.amount, 0);
                        const totalEstimated = exp.subcategories.reduce((s, sub) => s + sub.estimated, 0);
                        data.push([exp.categoryName || 'Sin nombre', '', totalAmount, totalEstimated]);
                        
                        exp.subcategories.forEach(sub => {
                            data.push(['', sub.name || 'Sin nombre', sub.amount, sub.estimated]);
                        });
                    } else {
                        data.push([exp.categoryName || 'Sin nombre', '', exp.amount, exp.estimated]);
                    }
                });
            }
            
            const ws = XLSX.utils.aoa_to_sheet(data);
            const wb = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(wb, ws, 'Gastos');
            
            const monthNames = ['enero', 'febrero', 'marzo', 'abril', 'mayo', 'junio', 'julio', 'agosto', 'septiembre', 'octubre', 'noviembre', 'diciembre'];
            XLSX.writeFile(wb, `gastos_${monthNames[currentMonth]}.xlsx`);
        }

        // Inicialización cuando se carga el documento
        document.addEventListener('DOMContentLoaded', () => {
            const monthNames = ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'];
            const monthSelect = document.getElementById('monthSelect');
            
            monthNames.forEach((name, i) => {
                const option = document.createElement('option');
                option.value = i;
                option.textContent = name;
                monthSelect.appendChild(option);
            });
            
            initializeData();
            monthSelect.value = currentMonth;
            
            // Cargar datos del mes actual
            if (monthlyData[currentMonth]) {
                document.getElementById('incomeInput').value = monthlyData[currentMonth].income || '';
            }
            
            monthSelect.onchange = (e) => {
                currentMonth = parseInt(e.target.value);
                
                // Asegurarse de que el mes existe en los datos
                if (!monthlyData[currentMonth]) {
                    monthlyData[currentMonth] = {
                        income: 0,
                        expenses: []
                    };
                }
                
                document.getElementById('incomeInput').value = monthlyData[currentMonth].income || '';
                render();
            };
            
            document.getElementById('incomeInput').oninput = (e) => {
                if (!monthlyData[currentMonth]) {
                    monthlyData[currentMonth] = {
                        income: 0,
                        expenses: []
                    };
                }
                
                monthlyData[currentMonth].income = parseFloat(e.target.value) || 0;
                render();
            };
            
            document.getElementById('addExpenseBtn').onclick = addExpense;
            document.getElementById('exportPdfBtn').onclick = exportToPDF;
            document.getElementById('exportExcelBtn').onclick = exportToExcel;
            
            // Configuración del modo oscuro/claro
            const themeToggle = document.getElementById('themeToggle');
            const body = document.body;
            
            const setTheme = (theme) => {
                if (theme === 'dark') {
                    body.classList.add('dark-mode');
                    themeToggle.checked = true;
                } else {
                    body.classList.remove('dark-mode');
                    themeToggle.checked = false;
                }
                updateCharts();
            };
            
            themeToggle.addEventListener('change', () => {
                setTheme(themeToggle.checked ? 'dark' : 'light');
            });
            
            // Detectar preferencia del sistema
            const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
            if (prefersDark) {
                setTheme('dark');
            }
            
            render();
        });
    </script>
</body>
</html>